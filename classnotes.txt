Functions:

Q: It seems counter-intuitive that sort.Slice() is passed the "value" people, and not a pointer to people, isn't it? After all, we want to mutate people. Didn't we learn that passing values to a function requires the use of a pointer?
A: Sounds like you understand it PERFECTLY! Just understand that a slice IS a pointer to an array. The mutation is being done to the array that the slice is pointing to.

Q: Is an anonymous function like we just studied a lambda function?
A: For sure. In computer programming, an anonymous function, or lambda abstraction, or function literal, is a function definition that is not bound to an identifier.

Pointer rules:

* operator - or dereferecing operator, used to declare pointer variable and access the value stored in the address
& operator - or address operator, used to return the address of a variable or to access the address of a variable to a pointer
A pointer holds the memory address of a value.
The type, *T is a pointer to a T value. Its zero value is nil.
If we want a method to modify its receiver (what is passed to it), we must use a pointer!
If we do not want to alter some data, the value of the receiver can be passed instead of a pointer to its receiver. In this case, the receiver is treated more like an argument.
Pointers are not safe for concurrent access. When you use multiple threads, you will get inconsistent results if you are changing and reading data from the same places in memory.
Unlike C, Go has no pointer arithmetic.

Interfaces:
Create a new program using interfaces. 
Again, there is no explicit declaration that says that the tiger struct implements the animal interface. 
During compilation, go notices that tiger struct implements all methods of animal interface hence it is allowed. 
Any other type which implements all methods of the animal interface becomes of that interface type.
